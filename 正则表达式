regular expression
正则表达式由两种字符构成，特殊字符（special characters）成为元字符（metacharacters）,其他为文字(literal)或者普通文本字符(normal text characters)。
正则表达式的元字符提供了更强大的描述能力，它对应的是语法规则。

完整的正则表达式由小的构建模块单元(building block unit)组成，每个单独的构建模块都很简单，不过它能够有无数种组合，因此将它们结合起来实现特殊目标必须依靠经验。

元字符：
行的起始和结束：^代表以“^”后面跟着的第一个单元开始，$代表以“$”的前一个单元结束

结构体：
construct[...]
结构体的内部可以是具体的字符（字符组），也可以是字符的范围，用“-”连接表示范围，如1-9，a-z等
字符组内部只有表达连接范围的时候，“-”是元字符，其他时候都是普通字符，如[1-9_-!],其中，1和9中间的是元字符代表范围，其他字符全是普通字符

排除型字符：
结构体内以^表示不包括“^”后面一个单元的字符，“^”必须在方括号内部第一个位子，如[^1-6]代表排除1-6的范围

任意字符
.代表一个任意字符
比如：搜索03/19/76,03.19.76,03-19-76
可以用03[.-/]19[.-/]76,或者干脆尝试用03.19.76
前者表达的清楚，后者简单，到底如何用，这要看你对要检索的文本的了解程度和要表达的精确程度，在这之间做出平衡。

匹配任意字表达式
|或的意思，or

忽略大小写
可以用[Aa]
更简单的写法是在表达式前加“-i”

转义：
使元字符失去特殊含义，变成普通符号
需要转义的符号前加/:如/<,/>,/!

限定范围()
括号限定表达式的范围，方便组合

可选项?
?后面的一个表达式或者字符，表示可以出现(也可没有)

重复出现
+和*
+表示之前紧邻的表达式内容出现一次或者多次（一次也匹配不成功，就出错）
*表示之前紧邻的表达式内容出现多次或者不出现(有没有都可以)

?+*称为量词

规定重现次数的范围
{min,max}






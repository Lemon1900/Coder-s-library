模板方法模式：定义一个操作中算法的框架，而将一些步骤延迟到子类中。模板方法模式使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。
Template Method Pattern:  Define the skeleton of an algorithm in an  operation, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure.

模板方法模式是一种基于继承的代码复用技术，它是一种类行为型模式。
模板方法模式是结构最简单的行为型设计模式，在其结构中只存在父类与子类之间的继承关系。通过使用模板方法模式，可以将一些复杂流程的实现步骤封装在一系列基本方法中，
在抽象父类中提供一个称之为模板方法的方法来定义这些基本方法的执行次序，而通过其子类来覆盖某些步骤，从而使得相同的算法框架可以有不同的执行结果。
模板方法模式提供了一个模板方法来定义算法框架，而某些具体步骤的实现可以在其子类中完成。

模板方法模式包含如下两个角色：
(1)AbstractClass（抽象类）：在抽象类中定义了一系列基本操作(PrimitiveOperations)，这些基本操作可以是具体的，也可以是抽象的，
每一个基本操作对应算法的一个步骤，在其子类中可以重定义或实现这些步骤。同时，在抽象类中实现了一个模板方法(Template Method)，用于定义一个算法的框架，
模板方法不仅可以调用在抽象类中实现的基本方法，也可以调用在抽象类的子类中实现的基本方法，还可以调用其他对象中的方法。
(2)ConcreteClass（具体子类）：它是抽象类的子类，用于实现在父类中声明的抽象基本操作以完成子类特定算法的步骤，也可以覆盖在父类中已经实现的具体基本操作。

模式实现
在实现模板方法模式时，开发抽象类的软件设计师和开发具体子类的软件设计师之间可以进行协作。一个设计师负责给出一个算法的轮廓和框架，
另一些设计师则负责给出这个算法的各个逻辑步骤。实现这些具体逻辑步骤的方法即为基本方法，而将这些基本方法汇总起来的方法即为模板方法，
模板方法模式的名字也因此而来。下面将详细介绍模板方法和基本方法：
1. 模板方法
一个模板方法是定义在抽象类中的、把基本操作方法组合在一起形成一个总算法或一个总行为的方法。这个模板方法定义在抽象类中，并由子类不加以修改地完全继承下来。
模板方法是一个具体方法，它给出了一个顶层逻辑框架，而逻辑的组成步骤在抽象类中可以是具体方法，也可以是抽象方法。由于模板方法是具体方法，
因此模板方法模式中的抽象层只能是抽象类，而不是接口。
2. 基本方法
基本方法是实现算法各个步骤的方法，是模板方法的组成部分。基本方法又可以分为三种：抽象方法(Abstract Method)、具体方法(Concrete Method)和
钩子方法(Hook Method)。
(1) 抽象方法：一个抽象方法由抽象类声明、由其具体子类实现。在C#语言里一个抽象方法以abstract关键字标识。
(2) 具体方法：一个具体方法由一个抽象类或具体类声明并实现，其子类可以进行覆盖也可以直接继承。
(3) 钩子方法：一个钩子方法由一个抽象类或具体类声明并实现，而其子类可能会加以扩展。
    通常在父类中给出的实现是一个空实现（可使用virtual关键字将其定义为虚函数），并以该空实现作为方法的默认实现，当然钩子方法也可以提供一个非空的默认实现。
    
在模板方法模式中，钩子方法有两类：
第一类钩子方法可以与一些具体步骤“挂钩”，以实现在不同条件下执行模板方法中的不同步骤，这类钩子方法的返回类型通常是bool类型的，这类方法名一般为IsXXX()，
用于对某个条件进行判断，如果条件满足则执行某一步骤，否则将不执行，如下代码片段所示：
……
  //模板方法
  public void TemplateMethod() 
  {
  Open();
  Display();
  //通过钩子方法来确定某步骤是否执行
  if (IsPrint()) 
  {
      Print();
  }
  }

  //钩子方法
  public bool IsPrint()
  {
      return true;
  }
……

在代码中IsPrint()方法即是钩子方法，它可以决定Print()方法是否执行，一般情况下，钩子方法的返回值为true，如果不希望某方法执行，
可以在其子类中覆盖钩子方法，将其返回值改为false即可，这种类型的钩子方法可以控制方法的执行，对一个算法进行约束。

还有一类钩子方法就是实现体为空的具体方法，子类可以根据需要覆盖或者继承这些钩子方法，与抽象方法相比，
这类钩子方法的好处在于子类如果没有覆盖父类中定义的钩子方法，编译可以正常通过，但是如果没有覆盖父类中声明的抽象方法，编译将报错。
在模板方法模式中，抽象类的典型代码如下：
abstract class AbstractClass {
//模板方法
  public void TemplateMethod() {
          PrimitiveOperation1();
          PrimitiveOperation2();
          PrimitiveOperation3();
  }

  //基本方法—具体方法
  public void PrimitiveOperation1() {
      //实现代码
  }

  //基本方法—抽象方法
      public abstract void PrimitiveOperation2();    

  //基本方法—钩子方法
  public virtual void PrimitiveOperation3(){ 
  }
}

在抽象类中，模板方法TemplateMethod()定义了算法的框架，在模板方法中调用基本方法以实现完整的算法，每一个基本方法如PrimitiveOperation1()、
PrimitiveOperation2()等均实现了算法的一部分，对于所有子类都相同的基本方法可在父类提供具体实现，例如PrimitiveOperation1()，
否则在父类声明为抽象方法或钩子方法，由不同的子类提供不同的实现，例如PrimitiveOperation2()和PrimitiveOperation3()。

可在抽象类的子类中提供抽象步骤的实现，也可覆盖父类中已经实现的具体方法，具体子类的典型代码如下：
class ConcreteClass extends AbstractClass {
    public override void PrimitiveOperation2() {
        //实现代码
    }

    public override void PrimitiveOperation3() {
        //实现代码
    }
}

在模板方法模式中，由于面向对象的多态性，子类对象在运行时将覆盖父类对象，子类中定义的方法也将覆盖父类中定义的方法，因此程序在运行时，
具体子类的基本方法将覆盖父类中定义的基本方法，子类的钩子方法也将覆盖父类的钩子方法，从而可以通过在子类中实现的钩子方法对父类方法的执行进行约束，
实现子类对父类行为的反向控制。


eg:
软件公司为某银行的业务支撑系统开发一个利息计算模块，利息计算流程如下：
(1) 系统根据账号和密码验证用户信息，如果用户信息错误，系统显示出错提示；
(2) 如果用户信息正确，则根据用户类型的不同使用不同的利息计算公式计算利息（如活期账户和定期账户具有不同的利息计算公式）；
(3) 系统显示利息。
使用模板方法模式设计该利息计算模块

Account充当抽象类角色，CurrentAccount和SavingAccount充当具体子类角色。
abstract class Account{
    //基本方法——具体方法
    public bool Validate(string account, string password) {
    Console.WriteLine("账号：{0}", account);
    Console.WriteLine("密码：{0}", password);
    //模拟登录
    if (account.Equals("张无忌") && password.Equals("123456")) {
        return true;
    }else {
      return false;
    }

    //基本方法——抽象方法
    public abstract void CalculateInterest();

    //基本方法——具体方法
    public void Display() {
        Console.WriteLine("显示利息！");
    }

    //模板方法
    public void Handle(string account, string password) {
    if (!Validate(account,password)) {
            Console.WriteLine("账户或密码错误！");
      return;
    }
    CalculateInterest();
    Display();
  }
}

CurrentAccount：活期账户类，充当具体子类。
class CurrentAccount extends Account{
    //覆盖父类的抽象基本方法
    public override void CalculateInterest() {
        Console.WriteLine("按活期利率计算利息！");
    }
}

SavingAccount：定期账户类，充当具体子类。
class SavingAccount : Account{
    //覆盖父类的抽象基本方法
    public override void CalculateInterest() {
        Console.WriteLine("按定期利率计算利息！");
    }
}

配置文件App.config，在配置文件中存储了具体子类的类名。
<?xml version="1.0" encoding="utf-8" ?>  
<configuration>  
  <appSettings>  
    <add key="subClass" value="TemplateMethodSample.CurrentAccount"/>  
  </appSettings>  
</configuration>  

客户端测试类
class Program{
    static void Main(string[] args){
    Account account;
    //读取配置文件
    string subClassStr = ConfigurationManager.AppSettings["subClass"];
    //反射生成对象
    account = (Account)Assembly.Load("TemplateMethodSample").CreateInstance(subClassStr);
    account.Handle("张无忌", "123456");
    Console.Read();
}

如果需要更换具体子类，无须修改源代码，只需修改配置文件App.config，
例如将活期账户(CurrentAccount)改为定期账户(Saving Account)，只需将存储在配置文件中的具体子类CurrentAccount改为SavingAccount
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <appSettings>
    <add key="subClass" value="TemplateMethodSample.SavingAccount"/>
  </appSettings>
</configuration>



钩子方法的使用
模板方法模式中，在父类中提供了一个定义算法框架的模板方法，还提供了一系列抽象方法、具体方法和钩子方法，其中钩子方法的引入使得子类可以控制父类的行为。
最简单的钩子方法就是空方法，代码如下：
public virtual void Display() {   }

当然也可以在钩子方法中定义一个默认的实现，如果子类不覆盖钩子方法，则执行父类的默认实现代码。
另一种钩子方法可以实现对其他方法进行约束，这种钩子方法通常返回一个bool类型，即返回true或false.


模板方法模式效果与适用场景
模板方法模式是基于继承的代码复用技术，它体现了面向对象的诸多重要思想，是一种使用较为频繁的模式。模板方法模式广泛应用于框架设计中，
以确保通过父类来控制处理流程的逻辑顺序（如框架的初始化，测试流程的设置等）。

模式优点
(1)在父类中形式化地定义一个算法，而由它的子类来实现细节的处理，在子类实现详细的处理算法时并不会改变算法中步骤的执行次序。
(2)模板方法模式是一种代码复用技术，它在类库设计中尤为重要，它提取了类库中的公共行为，将公共行为放在父类中，而通过其子类来实现不同的行为，
   它鼓励我们恰当使用继承来实现代码复用。
(3)可实现一种反向控制结构，通过子类覆盖父类的钩子方法来决定某一特定步骤是否需要执行。
(4)在模板方法模式中可以通过子类来覆盖父类的基本方法，不同的子类可以提供基本方法的不同实现，更换和增加新的子类很方便，符合单一职责原则和开闭原则。

模式缺点
需要为每一个基本方法的不同实现提供一个子类，如果父类中可变的基本方法太多，将会导致类的个数增加，系统更加庞大，设计也更加抽象，此时，
可结合桥接模式来进行设计。

模式适用场景
在以下情况下可以考虑使用模板方法模式：
(1)对一些复杂的算法进行分割，将其算法中固定不变的部分设计为模板方法和父类具体方法，而一些可以改变的细节由其子类来实现。
   即：一次性实现一个算法的不变部分，并将可变的行为留给子类来实现。
(2)各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。
(3)需要通过子类来决定父类算法中某个步骤是否执行，实现子类对父类的反向控制。
